    function load_2b31,filen,data
; ***************************************************************
; * PROGRAM TO LOAD 1B11,2A23,2A25 TRMM DATA FILES              *
; * SEE DOCUMENTATION FOR INSTRUCTIONS                          *
; * S. NESBITT V1.0 11/9/98                                     *
; ***************************************************************
; * Modifications by David B. Wolff, NASA/GSFC/613.1, SSAI      *
; ***************************************************************
; * 
; * flag = load_2b31('data/KWAJ/2B31/1999/2B31_CSI.990415.7944.KWAJ.6.HDF.Z',s)
; *
; *** Parse file name for some info
;
    filebase = file_basename(filen)
    a = strsplit(filebase,'.',/extract)
    type = a(0)
    orbit = a(2)
    site = a(3)
    ver  = a(4)
;
; *** Open the file
;
	fileid=hdf_open(filen,/read)
;
; *** READ THE VDATA TO GET THE SCAN TIMES
;
	vdataid=hdf_vd_getid(fileid,-1)
	vdname=hdf_vd_attach(fileid,vdataid)
    HDF_VD_GET,vdname,NFIELDS=n,count=nrecs
    if(nrecs eq 0) then begin
        hdf_vd_detach,vdname
        hdf_close,fileid
        flag = 'Empty Granule found!'
        print,flag
        return,flag
    endif
;
; *** Get the number of SDSs in the file
;
    sdsfileid = hdf_sd_start(filen,/read)

    hdf_sd_fileinfo,sdsfileid,numsds,ngatt
    names = strarr( numsds )
    ndims = lonarr( numsds )
    dtype = strarr(numsds)
    
    for i = 0, numsds - 1 do begin
        sds_id = hdf_sd_select(sdsfileid, i )
        hdf_sd_getinfo, sds_id, name = na, ndim = nd,type= typ
        names( i ) = na 
        ndims( i ) = nd
        dtype(i) = typ  
    endfor

    if numsds gt 0 then begin
;        print,"     Label       Dims   Type    Min   Max"
;        print,"---------------- ---- -------- ----- -----"
        for i=0,numsds-1 do begin
;            print,names(i),ndims(i),dtype(i),FORMAT='(A14,"   ",I4," ",A8," ")'
        endfor
    endif

;
; *** Load the VData
;
    vdataid=hdf_vd_find(fileid,'scan_time')
    vdname=hdf_vd_attach(fileid,vdataid)
    numscans=hdf_vd_read(vdname,scanTime,field='scanTime')
;
; *** 2B31 scan time is second of the day. Get year, month and day
; *** from filename.
;
    s=size(scanTime)
    yy=strarr(s[1]) & mo=yy & dd=yy & hh=yy & mm=yy & ss=yy
    date=str_sep(filen,'.')
    for i=0,s[1]-1 do begin
        if(date(1) gt 50) then begin
            yy[i]=strcompress(string('19'+strmid(date[1],0,2)),/remove_all)
        endif else begin
            yy[i]=strcompress(string('20'+strmid(date[1],0,2)),/remove_all)
        endelse
        mo[i]=strcompress(string(strmid(date[1],2,2)),/remove_all)
        dd[i]=strcompress(string(strmid(date[1],4,2)),/remove_all)
    endfor
;
; *** Get julday
;
    jday = get_julday(yy(0),mo(0),dd(0))
;
; *** Get time from second of the day
;
    flag = get_time_from_sotd(scantime,hh,mm,ss)
;
; *** Load the SDS data
;
    sdsfileid = hdf_sd_start(filen,/read)

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'geolocation'))
    hdf_sd_getdata,sds_id,geo

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'dHat'))
    hdf_sd_getdata,sds_id,dHat

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'sigmaDHat'))
    hdf_sd_getdata,sds_id,sigmadhat

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'rHat'))
    hdf_sd_getdata,sds_id,rhat

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'sigmaRHat'))
    hdf_sd_getdata,sds_id,sigmarhat

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'rrSurf'))
    hdf_sd_getdata,sds_id,rrsurf

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'sigmaRRsurf'))
    hdf_sd_getdata,sds_id,sigmarrsurf

    sds_id = hdf_sd_select(sdsfileid,hdf_sd_nametoindex(sdsfileid,'latentHeatHH'))
    hdf_sd_getdata,sds_id,latentheathh

;        
; *** Calculate the 2A12 stuff
;        
    dim=size(geo)
    rays=dim[2]
    scans=dim[3]

    lat = reform(geo[0,*,*])
    lon = reform(geo[1,*,*])
;
; *** These are place holders that will be filled in the main line
; *** routines upon return.
;
    range = fltarr(n_elements(lat(*,0)),n_elements(lat(0,*)))
    gv_bounds = {site: site, lat:0.0, lon: 0.0, wbc: 0.0, ebc: 0.0, sbc: 0.0, nbc: 0.0}

;
; *** Fill the structure
;
    data={site: site,               $
          gv_bounds: gv_bounds,     $
          type: type,               $
          orbit: orbit,			    $
          version: ver,			    $
          scans: scans,			    $
          rays: rays,	            $ 
          range: range,             $
          year: yy,				    $
          month: mo,			    $
          day: dd,				    $
          hour: hh,			     	$
          minute: mm,		     	$
          second: ss,			    $
          jday: jday,		     	$
          lon: lon,			        $
          lat: lat,			        $
          rain: rrsurf,             $
          latentheat: latentheatHH  $
         }
;    help,/str,data
;
; *** Close HDF file
;    
    hdf_sd_endaccess,sds_id
    hdf_sd_end,sdsfileid
    hdf_close,fileid


    flag = 'OK'
    return,flag
end
